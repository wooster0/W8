; REGISTERS:
; * X = 8-BIT X-AXIS REGISTER
; * Y = 8-BIT Y-AXIS REGISTER
; * I = 8-BIT INDEX  REGISTER
; * W = 8-BIT WORD   REGISTER
; * S = 8-BIT STATUS REGISTER
; MEMORY:
; * 255 BYTES:
;   * 0-127 ARE GENERAL-PURPOSE.
;   * 127-255 ARE THE DISPLAY.
; INSTRUCTIONS:
; * REGISTER MANIPULATION:
;   * SET: SEX SEY SEI SEW
;   * AND: ANX ANY ANI ANW
;   * IOR: IOX IOY IOI IOW
;   * EOR: EOX EOY EOI XOW
;   * ADD: ADX ADY ADI ADW

; NEW DESIGN:
INSTRUCTIONS:
* INITIALIZATION:
  1.  SET - SET
  2.  LOD - LOAD
  3.  STR - STORE
* MANIPULATION:
  4.  AND - AND
  5.  IOR - INCLUSIVE OR
  6.  EOR - EXCLUSIVE OR
  7.  ADD - ADD
* TRANSFER:
  8.  TRN - TRANSFER
  9.  TWS - TRANSFER W TO S
  10. TSW - TRANSFER S TO W
* SPECIAL:
  11. WAI - WAIT
  12. JMP - JUMP
  13. RET - RETURN
  14. DRW - DRAW W

SET X %10101010
STR X 0
LOD X 0

EOR X -1
ADD X 1
ADD X -1




POSSIBLE INSTRUCTION FORMATS:
* IIIIXXXX VVVVVVVV
* IIIIXXXX
* IIIIAAXX VVVVVVVV
* IIIIAABB
WHERE
* I = INSTRUCTION-DETERMINING BIT
* X = DON'T-CARE BIT
* V = A BIT OF VALUE
* A = A BIT OF FIRST REGISTER ARGUMENT
* B = A BIT OF SECOND REGISTER ARGUMENT

; * SPECIAL:
;   * DRW = DRAW W = WRITE W TO X:Y IN GRAPHICS MEMORY.
;   * WAI = WAIT

; PRINT THE GREETING FROM THE STATIC DATA.
PRINT_GREETING_PREP:
    SET X 0
    SET Y 0
    SET I 0
PRINT_GREETING:
    ADD X 1

    ; LOADS FROM STATIC MEMORY, USING INDEX REGISTER.
    LOD W GREETING
    ; DRAW W = WRITE W TO X:Y IN MEMORY 127-255.
    DRW

    ; INCREMENT INDEX REGISTER.
    ADD I 1

    ; WAI SLEEPS FOR 0.2 TIMES VALUE OF W REGISTER SECONDS
    ; UNTIL EITHER TIMEOUT HAPPENS OR, IF INTERRUPT HANDLER IS PASSED, INTERRUPT OCCURS.
    ; EXAMPLE: IF W IS 5, WAI SLEEPS FOR ONE SECOND (0.2 * 5 = 1) UNTIL TIMEOUT OR INTERRUPT.
    ; IF W IS 0, THERE IS NO TIMEOUT.
    SET W 1 ; SLEEP FOR 0.2 SECONDS IN BETWEEN EACH CHARACTER PRINT.
    WAI

    ; THIS JUMPS BACK UP TO PRINT_GREETING IF W IS NOT 0.
    JMP PRINT_GREETING

; REPEAT USER INPUT AND ALTERNATE STATUS LIGHTS EACH TIME A KEYSTROKE IS READ.
REPEAT_USER_INPUT_PREP:
    ; DRAW ON NEXT LINE.
    SET X 0
    SET Y 1
    ; LOAD STATE OF INITIAL STATUS LIGHTS.
    SET W %01010101
    TWS
REPEAT_USER_INPUT:
    SET W 0 ; NO TIMEOUT. ONLY WAKE UP ON INTERRUPT.
    WAI PRINT_KEYSTROKE

    ; ALTERNATE STATUS LIGHTS.
    TSW ; TRANSFER S TO W
    EOR W -1 ; EXCLUSIVE-OR W WITH $FF (NEGATE)
    TWS ; TRANSFER W TO S

    JMP REPEAT_USER_INPUT

; UPON ENTERING AN INTERRUPT HANDLER, W IS LOADED WITH THE VALUE RELEVANT TO THE SUBROUTINE.
; IN THIS CASE THAT IS THE KEYSTROKE.
PRINT_KEYSTROKE:
    DRW 
    ADD X 1
    RET ; RETURN FROM INTERRUPT AND WAKE UP

GREETING:
    ; THIS WILL BE CONCATENATED
    1, "a", "hello", 0
